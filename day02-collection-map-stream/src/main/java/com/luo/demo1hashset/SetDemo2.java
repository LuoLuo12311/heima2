package com.luo.demo1hashset;

public class SetDemo2 {
    public static void main(String[] args) {
        //目标：了解hashset的底层实现原理
        //hash值：java中每个对象都有一个大概率不相等的hash值，hash值是一个int类型的值，也可能会相等（超过int类型上限）
        //底层基于hash表存储数据（hash表是一种增删改查性能都较好的数据结构，但是会占用更多的内存）
        //hash表：
        //在jdk8之前hash表：数组+链表
        //1.第一次加数据时会在底层创建一个长度为16的数组，默认加载因子为0.75，数组名称是table
        //2.使用加入元素的hash值对数组长度减1取模，计算出存入的位置
        //3.判断该位置是否为null，如果为null则直接存入
        //4.如果该位置不为null，则调用equals方法判断两个元素是否相等，相等则不存在，不相等则存入
        //jdk8之前，新元素存入占老元素位置，老元素挂下面
        //jdk8之后，新元素直接挂在老元素下面，形成链表
        //5.扩容机制：整个hash表长度乘以加载因子，16*0.75=12时就扩容到原来长度的两倍
        //在jdk8之后hash表：数组+链表+红黑树
        //从jdk8开始，当链表长度超过8且数组长度大于64时，自动将链表转换成红黑树
        // ，红黑树查询速度更快，但是插入速度更慢
        //红黑树：就是一颗可以自平衡的二叉排序树
    }
}
